        -:    0:Source:list.c
        -:    0:Graph:list.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    0:Programs:0
        -:    1:
        -:    2:#include <stdio.h>
        -:    3:#include <stdlib.h>
        -:    4:#include <string.h>
        -:    5:struct linkedlist{
        -:    6:   struct linkedlist* prev;
        -:    7:   struct linkedlist* next;
        -:    8:   char key[100];
        -:    9:} ;
        -:   10:
    #####:   11:void printList(struct linkedlist* head, FILE *out_file){
    #####:   12:   if (head == NULL){
    #####:   13:	fprintf(out_file, "EMPTY\n");
    #####:   14:	return;
        -:   15:   }
        -:   16:   char prev[100];
    #####:   17:   if (head->prev == NULL){
    #####:   18:	strcpy(prev, "HEAD");
        -:   19:   }
        -:   20:   else{
    #####:   21:	strcpy(prev,head->prev->key);
        -:   22:   }
        -:   23:   char next[100];
    #####:   24:   if (head->next == NULL){
    #####:   25:        strcpy(next, "TAIL");
        -:   26:   }
        -:   27:   else{
    #####:   28:        strcpy(next, head->next->key);
        -:   29:   }
    #####:   30:   fprintf(out_file, "(%s,%s,%s)",head->key,prev,next);
    #####:   31:   if (strcmp(next,"TAIL")!=0){
    #####:   32:	fprintf(out_file, ",");
    #####:   33:	printList(head->next, out_file);
        -:   34:   }
        -:   35:   else{
    #####:   36:	fprintf(out_file, "\n");
        -:   37:   }
        -:   38:}
        -:   39:
    #####:   40:struct linkedlist* getTail(struct linkedlist** head){
    #####:   41:	if((*head)->next==NULL){
    #####:   42:		return *head;
        -:   43:	}
    #####:   44:	getTail(&((*head)->next));
    #####:   45:}
        -:   46:
    #####:   47:void deleteNodes(struct linkedlist** head, char key[]){
    #####:   48:	if(strcmp((*head)->key, key)==0){
    #####:   49:		if((*head)->prev == NULL && (*head)->next == NULL){
        -:   50:			struct linkedlist *tmp;
    #####:   51:                        tmp=*head;
    #####:   52:			*head = NULL;
    #####:   53:			free(tmp);
    #####:   54:			return;
        -:   55:		}
    #####:   56:		else if((*head)->prev == NULL){
        -:   57:			struct linkedlist *tmp;
    #####:   58:                        tmp=*head;
    #####:   59:			*head = (*head)->next;
    #####:   60:			(*head)->prev = NULL;
    #####:   61:			free(tmp);
    #####:   62:			deleteNodes(head,key);
        -:   63:		}
    #####:   64:		else if((*head)->next==NULL){
        -:   65:			struct linkedlist *tmp;
    #####:   66:                        tmp=*head;
    #####:   67:			(*head)->prev->next = NULL;
    #####:   68:			free(tmp);
    #####:   69:			return;
        -:   70:		}
        -:   71:		else {
        -:   72:			struct linkedlist *tmp;
    #####:   73:			tmp=*head;
    #####:   74:			(*head)= tmp->next;
    #####:   75:			(*head)->prev=tmp->prev;
    #####:   76:			free(tmp);
        -:   77:		}
        -:   78:	}
        -:   79:
    #####:   80:	if ((*head)->next != NULL){
    #####:   81:		deleteNodes(&((*head)->next), key);
        -:   82:	}
        -:   83:}
        -:   84:
    #####:   85:void freeList(struct linkedlist* head)
        -:   86:{
        -:   87:   struct linkedlist* tmp;
        -:   88:
    #####:   89:   while (head != NULL)
        -:   90:    {
    #####:   91:       tmp = head;
    #####:   92:       head = head->next;
    #####:   93:       free(tmp);
        -:   94:    }
        -:   95:
    #####:   96:}
        -:   97:
    #####:   98:int main(int argc, char *argv[])
        -:   99:{
    #####:  100:   FILE *in_file  = fopen(argv[1], "r"); // read only
    #####:  101:   FILE *out_file = fopen(argv[2], "w"); // write only 
        -:  102:   // test for files not existing
    #####:  103:   if (in_file == NULL || out_file == NULL)
        -:  104:   {
    #####:  105:     printf("Error! Could not open file\n");
        -:  106:
        -:  107:   }
    #####:  108:   char empty[]="EMPTY";
    #####:  109:   char headc[]="HEAD";
    #####:  110:   char tail[]="TAIL";
    #####:  111:   struct linkedlist* head = NULL;
    #####:  112:   int x=1;
        -:  113:   //fscanf(in_file, "%d",&x);
        -:  114:   //int i =0;
    #####:  115:   while (x==1){
        -:  116:	char line[100];
    #####:  117:	x=fscanf(in_file, "%100s", line);
    #####:  118:	if (x!=1){
    #####:  119:		break;
        -:  120:	}
    #####:  121:	if (strcmp(line, "addhead")==0){
        -:  122:		char line1[100];
    #####:  123:                fscanf(in_file, " %[^\n]s",line1);
    #####:  124:		if (strcmp(headc,line1)!=0 && strcmp(tail,line1)!=0 && strcmp(empty, line1)!=0){
        -:  125:
    #####:  126:			if (head ==NULL){
    #####:  127:				struct linkedlist *first= (struct linkedlist*)malloc(sizeof(struct linkedlist));
    #####:  128:				strcpy((*first).key, line1);
    #####:  129:				first->next= NULL;
    #####:  130:				first->prev= NULL;
    #####:  131:				head = first;
        -:  132:			}
        -:  133:			else{
    #####:  134:				struct linkedlist *second= (struct linkedlist*)malloc(sizeof(struct linkedlist));
    #####:  135:				strcpy((*second).key, line1);
    #####:  136:				second->next = head;
    #####:  137:				second->prev = NULL;
    #####:  138:				head->prev = second;
    #####:  139:				head = second;
        -:  140:			}
        -:  141:		}
        -:  142:	}
    #####:  143:	else if(strcmp(line, "print")==0){
    #####:  144:		printList(head, out_file);
        -:  145:	}
    #####:  146:	else if(strcmp(line, "addtail")==0){
        -:  147:		char line1[100];
    #####:  148:                fscanf(in_file, " %[^\n]s",line1);
    #####:  149:		if (strcmp(headc,line1)!=0 && strcmp(tail,line1)!=0 && strcmp(empty, line1)!=0){
    #####:  150:			if (head ==NULL){
    #####:  151:                        	struct linkedlist *first= (struct linkedlist*)malloc(sizeof(struct linkedlist));
    #####:  152:                        	strcpy((*first).key, line1);
    #####:  153:                        	first->next= NULL;
    #####:  154:                        	first->prev= NULL;
    #####:  155:                        	head = first;
        -:  156:                	}
        -:  157:			else{
    #####:  158:                        	struct linkedlist *second= (struct linkedlist*)malloc(sizeof(struct linkedlist));
    #####:  159:                        	strcpy((*second).key, line1);
    #####:  160:                        	second->next = NULL;
    #####:  161:                        	second->prev = getTail(&head);
    #####:  162:                        	second->prev->next = second;
        -:  163:                	}
        -:  164:		}
        -:  165:	}
    #####:  166:	else if(strcmp(line, "del")==0){
        -:  167:		char line2[2000];
    #####:  168:                fscanf(in_file,  " %[^\n]",line2);
    #####:  169:		if (head != NULL){
    #####:  170:                	deleteNodes(&head,line2);
        -:  171:		}
        -:  172:	}
        -:  173:	//i=i+1;
        -:  174:   }
    #####:  175:   fclose(in_file);
    #####:  176:   fclose(out_file);
    #####:  177:   freeList(head);
    #####:  178:   return 0;
        -:  179:}
